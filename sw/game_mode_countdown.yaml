globals:

- id: countdown_game_time
  type: int
  initial_value: "0"
- id: countdown_delay_time
  type: int
  initial_value: "0"
- id: countdown_timer_last_update_ms
  type: int
  initial_value: "0"

sensor:
  - platform: template
    id: game_countdown_timer
    update_interval: 250ms
    lambda: |-
      if (id(current_game_mode) != 3) {
        return {};
      }

      // Timer that reduces the time left on the game when the game is started
      int prev_value = id(game_countdown_timer).state;

      if (isnan(prev_value) || id(countdown_timer_last_update_ms) == 0) {
        id(countdown_timer_last_update_ms) = millis();
        return 0;
      }

      if (id(gm_finished)) {
        return prev_value;
      }

      int time_passed = millis() - id(countdown_timer_last_update_ms);
      int next_value = prev_value - time_passed;
      if (next_value < 0) {
        next_value = 0;
      }
      
      id(countdown_timer_last_update_ms) = millis();
      if (prev_value == 0 & next_value == 0) {
        return {};
      }

      ESP_LOGI("GM_countdown", "Game timer left %d", next_value);
      if (next_value == 0) {
        // Finish the game
        id(gm_finished) = true;
        id(gm_finished_ms) = millis();
      }

      return next_value;


script:
  - id: gm_countdown_display_update
    parameters:
      disp: lcd_base::LCDDisplay&
    then:
      - lambda: |-
          if (!id(settings_initiated)) {
            // Settings display and selection
            if (id(current_menu) == 0) {
              disp.printf(0, 0, "> Delay min: %d", id(countdown_delay_time));
              disp.printf(0, 1, "  Game  min: %d", id(countdown_game_time));
            } else if (id(current_menu) == 1) {
              disp.printf(0, 0, "  Delay min: %d", id(countdown_delay_time));
              disp.printf(0, 1, "> Game  min: %d", id(countdown_game_time));
            } else if (id(current_menu) == 2) {
              disp.printf(0, 0, "  Game  min: %d", id(countdown_game_time));
              disp.printf(0, 1, "> START");
            }
          } else {
              // Gameplay display
              if (id(prep_for_game_timer).state != 0) {
                // Displays time before game actuals starts
                disp.printf(0, 0, " PREP FOR GAME");
                disp.printf(0, 1, "     %s", format_time_remaining(id(prep_for_game_timer).state).c_str());
              } else {
                // Game started
                if (id(gm_finished)) {
                  disp.printf(0, 0, "   GAME ENDED");
                }
                else {
                  disp.printf(0, 0, "  GAME STARTED");
                  disp.printf(0, 1, "     %s", format_time_remaining(id(game_countdown_timer).state).c_str());
                }
              }
          }

  - id: gm_countdown_handle_key_pressed
    parameters:
      key: std::string
    then:
      - lambda: |-
          if (!id(settings_initiated)) {
            id(gm_countdown_handle_key_pressed_menu).execute(key);
          } else {
            id(gm_countdown_handle_key_pressed_game).execute(key);
          }
  - id: gm_countdown_handle_key_pressed_game
    parameters:
      key: std::string
    then:
      - lambda: |-
          if (id(prep_for_game_timer).state != 0) {
              return;
          } else {
  
          }
  - id: gm_countdown_handle_key_pressed_menu
    parameters:
        key: std::string
    then:
      - lambda: |-
          int next_menu = id(current_menu);

          if (key == "A") {
            // Move menu up
            next_menu = next_menu - 1;
            if (next_menu < 0) {
              next_menu = 2;
            }
            id(current_menu) = next_menu;
          } else if(key == "B") {
            // Move menu down
            next_menu = next_menu + 1;
            if (next_menu > 2) {
              next_menu = 0;
            }
            id(current_menu) = next_menu;
          } else if(key == "C") {
            // Clear selection or start the game
            if (next_menu == 0) {
              id(countdown_delay_time) = 0;
            } else if (next_menu == 1) {
              id(countdown_game_time) = 0;
            } else if (next_menu == 2) {
              // Start the game
              id(current_team) = "NONE";

              id(gm_start_game).execute(id(countdown_delay_time));
              ESP_LOGI("GM_countdown", "Starting the game");
            }
          }

          if (std::isdigit(key[0])) {
            // If digit is pressed check if anything needs to be done
            // If menu with number input is slected process the number

            if (next_menu == 0) {
              id(countdown_delay_time) = append_digit(key, id(countdown_delay_time));
            } else if (next_menu == 1) {
              id(countdown_game_time) = append_digit(key, id(countdown_game_time));
            } 
          }
  - id: gm_countdown_actual_start
    then:
      - lambda: |-
          // Game started after initial delay
          id(game_countdown_timer).publish_state(id(countdown_game_time) * 60 * 1000);

  - id: gm_countdown_clock
    then:
      - lambda: |-
          bool game_finished = id(gm_finished);


          

          

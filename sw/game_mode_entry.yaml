globals:
- id: current_game_mode
  type: int
  initial_value: "-1"
# -1 - Initial selection of the game mode
# 0 - Defusal
# 1 - Domination 
# 2 - Zone control
# 3 - Timer
# 4 - Mertvek

- id: current_menu
  type: int
  initial_value: "0"
- id: settings_initiated
  type: bool
  initial_value: "false"
- id: gm_started
  type: bool
  initial_value: "false"
- id: gm_finished
  type: bool
  initial_value: "false"
- id: gm_started_ms
  type: int
  initial_value: "0"
- id: gm_finished_ms
  type: int
  initial_value: "0"
- id: gm_delay_mins
  type: int
  initial_value: "0"
- id: gm_clock_last_update_ms
  type: int
  initial_value: "0"



sensor:
  - platform: template
    id: prep_for_game_timer
    update_interval: 250ms
    lambda: |-
      int prev_value = id(prep_for_game_timer).state;
      int game_delay_ms = id(gm_delay_mins) * 60 * 1000;

      if (isnan(prev_value)) {
        return game_delay_ms;
      }
      int time_passed = millis() - id(gm_started_ms);
      int next_value = game_delay_ms - time_passed;
      if (next_value < 0) {
        next_value = 0;
      }

      if(prev_value != 0 and next_value == 0) {
        id(start_game_siren).execute();
        id(gm_actual_start).execute();
      }
      if (prev_value == 0 and next_value == 0) {
        return {};
      }

      //ESP_LOGI("GM_ENTRY", "Timer left %d", next_value);

      return next_value;


script:
- id: gm_actual_start
  then:
    - lambda: |-
        // Game started after initial delay
        if (id(current_game_mode) == 1) {
          id(gm_domination_actual_start).execute();
        } else if (id(current_game_mode) == 2) {
          id(gm_zone_control_actual_start).execute();
        } else if (id(current_game_mode) == 3) {
          id(gm_countdown_actual_start).execute();
        }


- id: gm_display_update
  parameters:
    disp: lcd_base::LCDDisplay&
  then:
    - lambda: |-
        
        if (id(current_game_mode) == -1) {
          if (id(current_menu) == 0) {
            disp.print(0, 0, "> Defusal");
            disp.print(0, 1, "  Domination");
          } else if (id(current_menu) == 1) {
            disp.print(0, 0, "  Defusal");
            disp.print(0, 1, "> Domination");
          } else if (id(current_menu) == 2) {
            disp.print(0, 0, "  Domination");
            disp.print(0, 1, "> Zone control");
          } else if (id(current_menu) == 3) {
            disp.print(0, 0, "  Zone control");
            disp.print(0, 1, "> Timer");
          } else if (id(current_menu) == 4) {
            disp.print(0, 0, "  Timer");
            disp.print(0, 1, "> Mertvek");
          }
        } else if (id(current_game_mode) == 0) {
          id(gm_defusal_display_update).execute(disp);
        } else if (id(current_game_mode) == 1) {
          id(gm_domination_display_update).execute(disp);
        } else if (id(current_game_mode) == 2) {
          id(gm_zone_control_display_update).execute(disp);
        } else if (id(current_game_mode) == 3) {
          id(gm_countdown_display_update).execute(disp);
        } else {
          disp.print(3, 0, "Soon TM");
        }
        


- id: gm_handle_key_pressed
  parameters:
    key: std::string
  then:
    - lambda: |-
        if (id(current_game_mode) == -1) {
          int next_menu = id(current_menu);
          if (key == "A") {
            next_menu = next_menu - 1;
            if (next_menu < 0) {
              next_menu = 4;
            }
            id(current_menu) = next_menu;
          } else if(key == "B") {
            next_menu = next_menu + 1;
            if (next_menu > 4) {
              next_menu = 0;
            }
            id(current_menu) = next_menu;
          } else if(key == "C") {
            id(current_game_mode) = next_menu;
            id(current_menu) = 0;
          }
        } else if (id(current_game_mode) == 0) {
          id(gm_defusal_handle_key_pressed).execute(key);
        } else if (id(current_game_mode) == 1) {
          id(gm_domination_handle_key_pressed).execute(key);
        } else if (id(current_game_mode) == 2) {
          id(gm_zone_control_handle_key_pressed).execute(key);
        } else if (id(current_game_mode) == 3) {
          id(gm_countdown_handle_key_pressed).execute(key);
        }

    - component.update: my_display

- id: gm_clock
  then:
    - lambda: |-
        if (id(current_game_mode) == 0) {
          id(gm_defusal_clock).execute();
        } else if (id(current_game_mode) == 1) {
          id(gm_domination_clock).execute();
        } else if (id(current_game_mode) == 2) {
          id(gm_zone_control_clock).execute();
        } else if (id(current_game_mode) == 3) {
          id(gm_countdown_clock).execute();
        }
        id(gm_clock_last_update_ms) = millis();

- id: gm_start_game
  parameters:
    start_delay_mins: int
  then:
    - lambda: |-
        id(settings_initiated) = true;
        id(gm_started) = true;
        id(gm_started_ms) = millis();

        id(gm_delay_mins) = start_delay_mins;
        if (id(gm_delay_mins) > 0) {
          id(prep_for_game_timer).publish_state(id(gm_delay_mins));
        } else {
          id(gm_actual_start).execute();
        }

- id: gm_finish_game
  parameters:
    start_delay_mins: int
  then:
    - lambda: |-



